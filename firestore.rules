rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions - Keep these for later use
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function isStudent() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/students/$(request.auth.uid));
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidStudentData() {
      let requiredFields = ['name', 'email', 'studentId', 'department', 'semester'];
      return request.resource.data.keys().hasAll(requiredFields);
    }
    
    function isValidAdminData() {
      let requiredFields = ['email', 'role'];
      return request.resource.data.keys().hasAll(requiredFields) &&
             request.resource.data.role == 'admin';
    }

    function isValidCourseData() {
      let requiredFields = ['courseName', 'courseCode', 'instructor', 'schedule'];
      return request.resource.data.keys().hasAll(requiredFields);
    }

    function isValidGradeData() {
      let requiredFields = ['studentId', 'courseId', 'midterm', 'final', 'assignment', 'total', 'letterGrade'];
      return request.resource.data.keys().hasAll(requiredFields);
    }

    function isValidAttendanceData() {
      let requiredFields = ['studentId', 'courseId', 'date', 'status'];
      return request.resource.data.keys().hasAll(requiredFields) &&
             request.resource.data.status in ['present', 'absent', 'late'];
    }

    function isValidNotificationData() {
      let requiredFields = ['studentId', 'title', 'message', 'type', 'timestamp'];
      return request.resource.data.keys().hasAll(requiredFields) &&
             request.resource.data.type in ['info', 'warning', 'important'];
    }

    // Allow write access to test collection for connection testing
    match /test/{document=**} {
      allow read, write: if true;
    }

    // Rules for students collection
    match /students/{studentId} {
      allow read: if isAuthenticated() && (isAdmin() || isOwner(studentId));
      allow create: if isAdmin();
      allow update: if isAdmin() || isOwner(studentId);
      allow delete: if isAdmin();
    }

    // Rules for courses collection
    match /courses/{courseId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Rules for enrollments collection
    match /enrollments/{enrollmentId} {
      allow read: if isAuthenticated() && 
        (isAdmin() || resource.data.studentId == request.auth.uid);
      allow write: if isAdmin();
    }

    // Rules for grades collection
    match /grades/{gradeId} {
      allow read: if isAuthenticated() && 
        (isAdmin() || resource.data.studentId == request.auth.uid);
      allow write: if isAdmin();
    }

    // Rules for attendance collection
    match /attendance/{recordId} {
      allow read: if isAuthenticated() && 
        (isAdmin() || resource.data.studentId == request.auth.uid);
      allow write: if isAdmin();
    }

    // Rules for notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        (isAdmin() || resource.data.studentId == request.auth.uid);
      allow create: if isAdmin();
      allow update: if isAdmin() || 
        (isOwner(resource.data.studentId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']));
      allow delete: if isAdmin();
    }
    
    // Rules for admins collection
    match /admins/{adminId} {
      allow read: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && adminId == request.auth.uid;
      allow delete: if false;  // Prevent admin deletion for security
    }

    // Rules for student-registrations collection
    match /student-registrations/{registrationId} {
      allow read: if true;
      allow create: if true;
      allow update: if isAdmin() || (isOwner(registrationId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']));
      allow delete: if isAdmin();
    }

    // Rules for enquiries collection (contact form submissions)
    match /enquiries/{enquiryId} {
      allow create: if true;  // Allow anyone to create enquiries
      allow read: if isAdmin();  // Only admins can read enquiries
      allow update, delete: if isAdmin();  // Only admins can update/delete enquiries
    }
  }
} 